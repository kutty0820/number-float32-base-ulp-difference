{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar SIGN_MASK = require( '@stdlib/constants-float32-sign-mask' );\nvar toWordf = require( '@stdlib/number-float32-base-to-word' );\nvar abs = require( '@stdlib/math-base-special-abs' );\n\n\n// FUNCTIONS //\n\n/**\n* Converts an unsigned 32-bit integer corresponding to the IEEE 754 binary representation of a single-precision floating-point number to a lexicographically ordered integer.\n*\n* @private\n* @param {unsigned32} word - unsigned 32-bit integer\n* @returns {integer} lexicographically ordered integer\n*/\nfunction monotoneKey( word ) {\n\tif ( word & SIGN_MASK ) { // x < 0\n\t\treturn ( ~word + 1 ); // two's-complement negation\n\t}\n\t// x >= 0\n\treturn ( word | SIGN_MASK ) >>> 0; // push +0 to just above -0\n}\n\n\n// MAIN //\n\n/**\n* Computes the number of representable single-precision floating-point values that separate two single-precision floating-point numbers along the real number line.\n*\n* ## Notes\n*\n* -   Adjacent single-precision floating-point numbers differ by 1 ulp (unit in the last place).\n* -   Signed zeros differ only in the sign bit but are considered numerically equal, and thus their ULP difference is 0.\n*\n* @param {number} x - first value\n* @param {number} y - second value\n* @returns {number} result\n*\n* @example\n* var EPS = require( '@stdlib/constants-float32-eps' );\n*\n* var d = ulpdiff( 1.0, 1.0+EPS );\n* // returns 1.0\n*\n* d = ulpdiff( 1.0+EPS, 1.0 );\n* // returns 1.0\n*\n* d = ulpdiff( 1.0, 1.0+EPS+EPS );\n* // returns 2.0\n*\n* d = ulpdiff( 1.0, NaN );\n* // returns NaN\n*\n* d = ulpdiff( NaN, 1.0 );\n* // returns NaN\n*\n* d = ulpdiff( NaN, NaN );\n* // returns NaN\n*/\nfunction ulpdiff( x, y ) {\n\tvar wx;\n\tvar wy;\n\n\tif ( isnanf( x ) || isnanf( y ) ) {\n\t\treturn NaN;\n\t}\n\t// Convert input values to unsigned 32-bit integers corresponding to the IEEE 754 binary representation of single-precision floating-point numbers:\n\twx = toWordf( x );\n\twy = toWordf( y );\n\n\t// Convert the words to lexicographically ordered integers:\n\twx = monotoneKey( wx );\n\twy = monotoneKey( wy );\n\n\t// Return a double as a result, which can exactly represent the ULP difference for all representable single-precision floating-point numbers:\n\treturn abs( wx - wy );\n}\n\n\n// EXPORTS //\n\nmodule.exports = ulpdiff;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the number of representable single-precision floating-point values that separate two single-precision floating-point numbers along the real number line.\n*\n* @module @stdlib/number-float32-base-ulp-difference\n*\n* @example\n* var EPS = require( '@stdlib/constants-float32-eps' );\n* var ulpdiff = require( '@stdlib/number-float32-base-ulp-difference' );\n*\n* var d = ulpdiff( 1.0, EPS );\n* // returns 1.0\n*\n* d = ulpdiff( EPS, 1.0 );\n* // returns 1.0\n*\n* d = ulpdiff( 1.0, EPS+EPS );\n* // returns 2.0\n*\n* d = ulpdiff( 1.0, NaN );\n* // returns NaN\n*\n* d = ulpdiff( NaN, 1.0 );\n* // returns NaN\n*\n* d = ulpdiff( NaN, NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,kCAAmC,EACrDC,EAAY,QAAS,qCAAsC,EAC3DC,EAAU,QAAS,qCAAsC,EACzDC,EAAM,QAAS,+BAAgC,EAYnD,SAASC,EAAaC,EAAO,CAC5B,OAAKA,EAAOJ,EACF,CAACI,EAAO,GAGTA,EAAOJ,KAAgB,CACjC,CAsCA,SAASK,EAASC,EAAGC,EAAI,CACxB,IAAIC,EACAC,EAEJ,OAAKV,EAAQO,CAAE,GAAKP,EAAQQ,CAAE,EACtB,KAGRC,EAAKP,EAASK,CAAE,EAChBG,EAAKR,EAASM,CAAE,EAGhBC,EAAKL,EAAaK,CAAG,EACrBC,EAAKN,EAAaM,CAAG,EAGdP,EAAKM,EAAKC,CAAG,EACrB,CAKAX,EAAO,QAAUO,ICrDjB,IAAIK,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isnanf", "SIGN_MASK", "toWordf", "abs", "monotoneKey", "word", "ulpdiff", "x", "y", "wx", "wy", "main"]
}
